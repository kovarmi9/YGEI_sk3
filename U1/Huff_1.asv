clc; clear; format long G

Sec=randi(5,1,20,1)-1;

Sec=[0,0,0,0,0,1,1,1,1,1,2,2,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6];

Table={Sec(1),1,1};

%Count the frequency of parametrs
for i=2:length(Sec)
    if any([Table{:,1}]==Sec(i))
        for j=1:size(Table,1)
            if Table{j,1}==Sec(i)
                Table{j,2}=Table{j,2}+1;
            end
        end
    else
        Table=[Table;{Sec(i),1,1}];
    end
end
Table=sortrows(Table, 2);
PomTable=Table;

% Creates a Huffman Tree
while  size(PomTable,1)>2
    %sorting table by the frequency
    PomTable = sortrows(PomTable, 2);
    % Pick the two smallest and add the frequency
    nodes = {PomTable(1:2,:),PomTable{1,2}+PomTable{2,2},PomTable{1,3}+PomTable{2,3}};
    PomTable(1:2,:)=[];
    % Creates a new table with added frequencies
    PomTable=[PomTable;nodes];
end
PomTable = sortrows(PomTable, 2);
PomTable = AssignValues(PomTable);

StrCode=string(Table(:,end));
STable=Table;
STable(:,end-1:end)=[];
StrCode(:,1)="";
STable=[STable,StrCode];

Code="";
for i=1:2
    if PomTable{i,3}~=1
       Code=Code+PomTable{i,4}
       
    else
       Code=Code+PomTable{i,4}
    end
end

function F = AssignValues(F)
    F = GenerateValue(F);
    for i=1:2
        if F{i,3}~=1
            F{i,1} = AssignValues(F{i,1});
        end
    end
end

function [F] = GenerateValue(F)
    if (F{1,3}~=1 || F{2,3}~=1) && abs(F{1,3}-F{2,3})/abs(F{1,2}-F{2,2})>=(F{1,3}+F{2,3})/(F{1,2}+F{2,2})
        F=sortrows(sortrows(F, 2), 3);
        B=[F(1,:),'0'];
        E=[F(2,:),'1'];
    else
        F=sortrows(F,2);
        B=[F(1,:),'1'];
        E=[F(2,:),'0'];
    end
    F=[B;E];
end